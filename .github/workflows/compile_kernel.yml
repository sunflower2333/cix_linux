name: Build and Release Linux Kernel

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Cache build output
      uses: actions/cache@v3
      with:
        path: |
          OUT
        key: ${{ runner.os }}-kernel-${{ hashFiles('**/Makefile') }}
        restore-keys: |
          ${{ runner.os }}-kernel-

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang llvm lld build-essential bc kmod cpio flex bison libssl-dev p7zip-full #gcc-aarch64-linux-gnu

    - name: Build kernel
      run: |
        export KDIR=$PWD
        export KOUT=$KDIR/OUT
        make ARCH=arm64 LLVM=1 LLVM_IAS=1 O=$KOUT -j16 defconfig
        make ARCH=arm64 LLVM=1 LLVM_IAS=1 O=$KOUT -j16 cix.config
        make ARCH=arm64 LLVM=1 LLVM_IAS=1 O=$KOUT -j$(nproc)
        make ARCH=arm64 LLVM=1 LLVM_IAS=1 O=$KOUT -j$(nproc) modules_install INSTALL_MOD_PATH=$KDIR/kernel_modules
        make ARCH=arm64 LLVM=1 LLVM_IAS=1 O=$KOUT -j$(nproc) headers_install INSTALL_HDR_PATH=$KDIR/linux_headers
        # Pack headers
        cp $KOUT/.config $KDIR/linux_headers/
        cp $KOUT/Module.symvers $KDIR/linux_headers/
        mkdir -p $KDIR/linux_headers/arch
        cp -r $KDIR/arch/arm64/include $KDIR/linux_headers/arch/
        cp -r $KDIR/arch/arm64/Makefile $KDIR/linux_headers/arch/
        cp -r $KDIR/arch/arm/include $KDIR/linux_headers/arch/
        cp -r $KDIR/arch/arm/Makefile $KDIR/linux_headers/arch/
        cp -r $KDIR/include $KDIR/linux_headers/
        cp -r $KDIR/Makefile $KDIR/linux_headers/
        cp -r $KDIR/Kconfig $KDIR/linux_headers/
        cp -r $KDIR/scripts $KDIR/linux_headers/

    - name: Build GPU Driver
      run: |
        # clone driver
        git clone --depth=1 "https://gitlab.com/cix-linux/cix_opensource/gpu_kernel" gpu_kernel
        # assign variables
        export KDIR=${PWD}
        export gpu_driver_dir=${KDIR}/gpu_kernel/drivers
        export CONFIG_MALI_BASE_MODULES=y
        export CONFIG_MALI_MEMORY_GROUP_MANAGER=y
        export CONFIG_MALI_PROTECTED_MEMORY_ALLOCATOR=y
        export CONFIG_MALI_PLATFORM_NAME="sky1"
        export CONFIG_MALI_CSF_SUPPORT=y
        export CONFIG_MALI_CIX_POWER_MODEL=y
        # build
        ARCH=arm64 make -j4 -C ${gpu_driver_dir}/base/arm/
        ARCH=arm64 make -j4 -C ${gpu_driver_dir}/gpu/arm/
        # copy to modules/extra
        mkdir -p $PWD/OUT/kernel_modules/extra
        cp ${gpu_driver_dir}/base/arm/memory_group_manager/memory_group_manager.ko $PWD/OUT/kernel_modules/extra
        cp ${gpu_driver_dir}/base/arm/protected_memory_allocator/protected_memory_allocator.ko $PWD/OUT/kernel_modules/extra
        cp ${gpu_driver_dir}/gpu/arm/midgard/mali_kbase.ko $PWD/OUT/kernel_modules/extra

    - name: Package kernel
      run: |
        mkdir -p kernel-package
        cp OUT/arch/arm64/boot/Image kernel-package/
        7z a kernel.7z -t7z kernel-package/*

    - name: Package device tree
      run: |
        mkdir -p dtb-package
        cp OUT/arch/arm64/boot/dts/*/*.dtb dtb-package/
        7z a dtbs.7z -t7z dtb-package/*

    - name: Package modules
      run: |
        tar a modules.tar.gz kernel_modules/*

    - name: Package headers
      run: |
        7z a headers.7z -t7z linux_headers/*

    - name: Set Release Tag and Name
      id: set_tag_name
      run: |
        current_time=$(date +"%y.%U.%H.%M")
        echo "TAG_NAME=release-${current_time}" >> $GITHUB_ENV
        echo "RELEASE_NAME=Release ${current_time}" >> $GITHUB_ENV

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG_NAME }}
        release_name: ${{ env.RELEASE_NAME }}
        draft: false
        prerelease: false

    - name: Upload Kernel
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: kernel.7z
        asset_name: kernel.7z
        asset_content_type: application/x-7z-compressed

    - name: Upload Device Tree
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dtbs.7z
        asset_name: dtbs.7z
        asset_content_type: application/x-7z-compressed

    - name: Upload Modules
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: modules.tar.gz
        asset_name: modules.tar.gz
        asset_content_type: application/x-7z-compressed

    - name: Upload Headers
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: headers.7z
        asset_name: headers.7z
        asset_content_type: application/x-7z-compressed
