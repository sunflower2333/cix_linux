#ifndef __MNTN_PUBLIC_INTERFACE_H__
#define __MNTN_PUBLIC_INTERFACE_H__

#include "mntn_dump_interface.h"

#define SKY1_HW_REBOOT_REASON_ADDR (0x16000218)
#define REBOOT_REASON_ADDR (0x16000500)
#define POST_CODE_ADDR (0x05030F00)
#define SKY1_DFD_NV_ADDR (0x16000514)
#define FW_BOOT_PERF_BASE (0x83E04000)
#define CIX_SYS_COUNTER_BASE (0x16001000)

enum boot_stage_postcode
{
	STAGE_KERNEL_START = 0xF000,
	STAGE_KERNEL_EARLY_INITCALL = 0xF100,
	STAGE_KERNEL_PURE_INITCALL = 0xF102,
	STAGE_KERNEL_CORE_INITCALL = 0xF104,
	STAGE_KERNEL_CORE_INITCALL_SYNC = 0xF106,
	STAGE_KERNEL_POSTCORE_INITCALL = 0xF108,
	STAGE_KERNEL_POSTCORE_INITCALL_SYNC = 0xF10A,
	STAGE_KERNEL_ARCH_INITCALL = 0xF10C,
	STAGE_KERNEL_ARCH_INITCALLC = 0xF10E,
	STAGE_KERNEL_SUBSYS_INITCALL = 0xF110,
	STAGE_KERNEL_SUBSYS_INITCALL_SYNC = 0xF112,
	STAGE_KERNEL_FS_INITCALL = 0xF114,
	STAGE_KERNEL_FS_INITCALL_SYNC = 0xF116,
	STAGE_KERNEL_ROOTFS_INITCALL = 0xF118,
	STAGE_KERNEL_DEVICE_INITCALL = 0xF11A,
	STAGE_KERNEL_DEVICE_INITCALL_SYNC = 0xF11C,
	STAGE_KERNEL_LATE_INITCALL = 0xF11E,
	STAGE_KERNEL_LATE_INITCALL_SYNC = 0xF120,
	STAGE_KERNEL_CONSOLE_INITCALL = 0xF122,
	STAGE_KERNEL_SECURITY_INITCALL = 0xF124,
	STAGE_KERNEL_BOOTANIM_COMPLETE = 0xF126,
	STAGE_INIT_INIT_START = 0xF130,
	STAGE_INIT_ON_EARLY_INIT = 0xF132,
	STAGE_INIT_ON_INIT = 0xF134,
	STAGE_INIT_ON_EARLY_FS = 0xF136,
	STAGE_INIT_ON_FS = 0xF138,
	STAGE_INIT_ON_POST_FS = 0xF13A,
	STAGE_INIT_ON_POST_FS_DATA = 0xF13C,
	STAGE_INIT_ON_EARLY_BOOT = 0xF13E,
	STAGE_INIT_ON_BOOT = 0xF140,
	STAGE_ANDROID_ZYGOTE_START = 0xF200,
	STAGE_ANDROID_VM_START = 0xF203,
	STAGE_ANDROID_PHASE_WAIT_FOR_DEFAULT_DISPLAY = 0xF206,
	STAGE_ANDROID_PHASE_LOCK_SETTINGS_READY = 0xF209,
	STAGE_ANDROID_PHASE_SYSTEM_SERVICES_READY = 0xF20C,
	STAGE_ANDROID_PHASE_ACTIVITY_MANAGER_READY = 0xF210,
	STAGE_ANDROID_PHASE_THIRD_PARTY_APPS_CAN_START = 0xF213,
	STAGE_ANDROID_BOOT_SUCCESS = 0xF250,
	STAGE_BOOTUP_END = STAGE_ANDROID_BOOT_SUCCESS,
	STAGE_END = 0xFEEE,
};

enum himntnEnum
{
	HIMNTN_NVE_VALID = 0,
	HIMNTN_GOBAL_RESETLOG,
	HIMNTN_MNTN_DUMP_MEM,
	HIMNTN_PANIC_INTO_LOOP,
	HIMNTN_KERNEL_DUMP_ENABLE,
	HIMNTN_WDT_MIN,
	HIMNTN_AP_WDT = HIMNTN_WDT_MIN,
	HIMNTN_GLOBAL_WDT,
	HIMNTN_CSUSE_WDT,
	HIMNTN_CSUPM_WDT,
	HIMNTN_HIFI_WDT,
	HIMNTN_SECOS_WDT,
	HIMNTN_ISP_WDT,
	HIMNTN_NPU_WDT,
	HIMNTN_VPU_WDT,
	HIMNTN_MTE_ENABLE,
	HIMNTN_BOTTOM
};

typedef enum
{
	AP_S_COLDBOOT = 0x0,
	bootloader = 0x01,
	recovery = 0x02,
	resetfactory = 0x03,
	resetuser = 0x04,
	sdupdate = 0x05,
	chargereboot = 0x06,
	resize = 0x07,
	erecovery = 0x08,
	usbupdate = 0x09,
	cust = 0x0a,
	oem_rtc = 0x0c,
	UNKNOWN = 0x0d,
	mountfail = 0x0e,
	hungdetect = 0x0f,
	COLDBOOT = 0x10,
	updatedataimg = 0x11,
	at2resetfactory = 0x12,
	AP_S_FASTBOOTFLASH = 0x13,
	AP_S_PRESS6S = 0x14,
	BR_UPDATE_USB = 0x15,
	BR_UPDATA_SD_FORCE = 0x16,
	BR_KEY_VOLUMN_UP = 0x17,
	BR_PRESS_1S = 0x18,
	BR_PRESS_10S = 0x19,
	BR_CHECK_RECOVERY = 0x1a,
	BR_CHECK_ERECOVERY = 0x1b,
	BR_CHECK_SDUPDATE = 0x1c,
	BR_CHECK_USBUPDATE = 0x1d,
	BR_CHECK_RESETFACTORY = 0x1e,
	BR_CHECK_HOTAUPDATE = 0x1f,
	BR_POWERONNOBAT = 0x20,
	BR_NOGUI = 0x21,
	BR_FACTORY_VERSION = 0x22,
	BR_RESET_HAPPEN = 0x23,
	BR_POWEROFF_ALARM = 0x24,
	BR_POWEROFF_CHARGE = 0x25,
	BR_POWERON_BY_SMPL = 0x26,
	BR_CHECK_UPDATEDATAIMG = 0x27,
	BR_REBOOT_CPU_BUCK = 0x28,
	BR_L2_CACHE_FAIL = 0x29,
	BR_POWERON_CHARGE = 0x2a,
	gpscoldboot = 0x2b,
	atfactoryreset0 = 0x2c,
	AP_S_PRESSKEY_COUNT = 0x2d,
	fastbootd = 0x2e,
	hibench_slt = 0x2f,
	hibench_fastboot = 0x30,
	REBOOT_REASON_LABEL1 = 0x40,
	AP_S_ABNORMAL = REBOOT_REASON_LABEL1,
	AP_S_TSENSOR0 = 0x41,
	AP_S_TSENSOR1 = 0x42,
	AP_S_AWDT = 0x43,
	CHARGER_S_WDT = 0x44,
	G3D_S_G3DTSENSOR = 0x45,
	CIX_PM_REBOOT = 0x46,
	CIX_SE_REBOOT = 0x47,
	IOM3_S_IOMCURST = 0x48,
	ASP_S_ASPWD = 0x49,
	CP_S_CPWD = 0x4a,
	IVP_S_IVPWD = 0x4b,
	ISP_S_ISPWD = 0x4c,
	AP_S_DDR_UCE_WD = 0x4d,
	AP_S_DDR_FATAL_INTER = 0X4e,
	OCBC_S_WD = 0x4f,
	AP_S_PMU = 0x50,
	AP_S_SMPL = 0x51,
	AP_S_SCHARGER = 0x52,
	LPM3_S_EXCEPTION = 0x53,
	MMC_S_EXCEPTION = 0x54,
	IDM_S_EXCEPTION = 0x55,
	TZC400_S_EXCEPTION = 0x56,
	REBOOT_REASON_LABEL2 = 0x60,
	AP_S_PANIC = REBOOT_REASON_LABEL2,
	AP_S_NOC = 0x61,
	AP_S_RESUME_SLOWY = 0x62,
	AP_S_DDRC_SEC = 0x63,
	AP_S_F2FS = 0x64,
	AP_S_COMBINATIONKEY = 0x65,
	AP_S_BL31_PANIC = 0x66,
	AP_S_MAILBOX = 0x67,
	AP_S_HHEE_PANIC = 0x68,
	AP_S_SUBPMU = 0x69,
	AP_S_VENDOR_PANIC = 0x6A,
	REBOOT_REASON_LABEL3 = 0x70,
	CP_S_EXCEPTION_START = REBOOT_REASON_LABEL3,
	CP_S_MODEMDMSS = CP_S_EXCEPTION_START,
	CP_S_MODEMNOC = 0x71,
	CP_S_MODEMAP = 0x72,
	CP_S_EXCEPTION = 0x73,
	CP_S_RESETFAIL = 0x74,
	CP_S_NORMALRESET = 0x75,
	CP_S_RILD_EXCEPTION = 0x76,
	CP_S_3RD_EXCEPTION = 0x77,
	CP_S_DRV_EXC = 0x78,
	CP_S_PAM_EXC = 0x79,
	CP_S_GUAS_EXC = 0x7a,
	CP_S_CTTF_EXC = 0x7b,
	CP_S_CAS_CPROC_EXC = 0x7c,
	CP_S_GUDSP_EXC = 0x7d,
	CP_S_TLPS_EXC = 0x7e,
	CP_S_TLDSP_EXC = 0x7f,
	CP_S_CPHY_EXC = 0x80,
	CP_S_GUCNAS_EXC = 0x81,
	CP_S_EXCEPTION_END = CP_S_GUCNAS_EXC,
	SOCHIFI_S_EXCEPTION = 0x82,
	HIFI_S_RESETFAIL = 0x83,
	ISP_S_EXCEPTION = 0x84,
	IVP_S_EXCEPTION = 0x85,
	IOM3_S_EXCEPTION = 0x86,
	TEE_S_EXCEPTION = 0x87,
	CODECHIFI_S_EXCEPTION = 0x88,
	IOM3_S_USER_EXCEPTION = 0x89,
	HISEE_S_EXCEPTION = 0x8a,
	NPU_S_EXCEPTION = 0x8b,
	WIFI_S_EXCEPTION = 0x8c,
	BFGX_S_EXCEPTION = 0x8d,
	AUDIO_CODEC_EXCEPTION = 0x8e,
	DSS_S_EXCEPTION = 0x8f,
	CSI_S_EXCEPTION = 0x90,
	CSIDMA_S_EXCEPTION = 0x91,
	REBOOT_REASON_LABEL4 = 0xa0,
	XLOADER_S_DDRINIT_FAIL = REBOOT_REASON_LABEL4,
	XLOADER_S_EMMCINIT_FAIL = 0xa1,
	XLOADER_S_LOAD_FAIL = 0xa2,
	XLOADER_S_VERIFY_FAIL = 0xa3,
	XLOADER_S_WATCHDOG = 0xa4,
	XLOADER_INSE_S_PANIC = 0xa5,
	XLOADER_MEMORY_REPAIR = 0xa6,
	XLOADER_AUTH_USB_FAIL = 0xa7,
	FASTBOOT_EMMCINIT_FAIL = 0xb0,
	FASTBOOT_S_PANIC = 0xb1,
	FASTBOOT_S_WATCHDOG = 0xb2,
	FASTBOOT_OCV_VOL_ERR = 0xb3,
	FASTBOOT_BAT_TEMP_ERR = 0xb4,
	FASTBOOT_MISC_ERR = 0xb5,
	FASTBOOT_LD_DTIMG_ERR = 0xb6,
	FASTBOOT_LD_OTHRIMG_ERR = 0xb7,
	FASTBOOT_KERNELIMG_ERR = 0xb8,
	FASTBOOT_LOADLPMCU_FAIL = 0xb9,
	FASTBOOT_VERIFY_FAIL = 0xba,
	FASTBOOT_SOC_TEMP_ERR = 0xbb,
	FASTBOOT_FLASHCERT_FAIL = 0xbc,
	FASTBOOT_MULCOREON_FAIL = 0xbd,
	FASTBOOT_MULCOREOFF_FAIL = 0xbe,
	FASTBOOT_S_SOC_SPEC = 0xbf,
	REBOOT_REASON_LABEL5 = 0xd0,
	BFM_S_NATIVE_BOOT_FAIL = REBOOT_REASON_LABEL5,
	BFM_S_BOOT_TIMEOUT,
	BFM_S_FW_BOOT_FAIL,
	BFM_S_NATIVE_DATA_FAIL,
	IOM3_S_FDUL_EXCEPTION = 0xd4,
	SENSOR_FUSION_EXCEPTION = 0xd5,
	CSUSE_S_EXCEPTION = 0xd6,
	CSUPM_S_EXCEPTION = 0xd7,
	REBOOT_REASON_LABEL6 = 0xe0,
} EXCH_SOURCE;

enum MODID_LIST {
	PLAT_BB_MOD_MODEM_DRV_START = 0x00000000,
	PLAT_BB_MOD_MODEM_DRV_END = 0x0fffffff,
	PLAT_BB_MOD_MODEM_OSA_START = 0x10000000,
	PLAT_BB_MOD_MODEM_OSA_END = 0x1fffffff,
	PLAT_BB_MOD_MODEM_OM_START = 0x20000000,
	PLAT_BB_MOD_MODEM_OM_END = 0x2fffffff,
	PLAT_BB_MOD_MODEM_GU_L2_START = 0x30000000,
	PLAT_BB_MOD_MODEM_GU_L2_END = 0x3fffffff,
	PLAT_BB_MOD_MODEM_GU_WAS_START = 0x40000000,
	PLAT_BB_MOD_MODEM_GU_WAS_END = 0x4fffffff,
	PLAT_BB_MOD_MODEM_GU_GAS_START = 0x50000000,
	PLAT_BB_MOD_MODEM_GU_GAS_END = 0x5fffffff,
	PLAT_BB_MOD_MODEM_GU_NAS_START = 0x60000000,
	PLAT_BB_MOD_MODEM_GU_NAS_END = 0x6fffffff,
	PLAT_BB_MOD_MODEM_GU_DSP_START = 0x70000000,
	PLAT_BB_MOD_MODEM_GU_DSP_END = 0x7fffffff,
	PLAT_BB_MOD_AP_START = 0x80000000,
	PLAT_BB_MOD_AP_END = 0x81ffffff,
	PLAT_BB_MOD_ATF_START = 0x82000000,
	PLAT_BB_MOD_ATF_END = 0x82ffffff,
	PLAT_BB_MOD_CSUSE_START = 0x83000000,
	PLAT_BB_MOD_CSUSE_END = 0x83ffffff,
	PLAT_BB_MOD_CSUPM_START = 0x84000000,
	PLAT_BB_MOD_CSUPM_END = 0x84ffffff,
	PLAT_BB_MOD_UEFI_START = 0x85000000,
	PLAT_BB_MOD_UEFI_END = 0x85ffffff,
	PLAT_BB_MOD_TEEOS_START = 0x86000000,
	PLAT_BB_MOD_TEEOS_END = 0x86ffffff,
	PLAT_BB_MOD_SF_START = 0x87000000,
	PLAT_BB_MOD_SF_END = 0x87ffffff,
	PLAT_BB_MOD_ISP_START = 0x88000000,
	PLAT_BB_MOD_ISP_END = 0x88ffffff,
	PLAT_BB_MOD_HIFI_START = 0x89000000,
	PLAT_BB_MOD_HIFI_END = 0x89ffffff,
	PLAT_BB_MOD_NPU_START = 0x8a000000,
	PLAT_BB_MOD_NPU_END = 0x8Affffff,
	PLAT_BB_MOD_VPU_START = 0x8b000000,
	PLAT_BB_MOD_VPU_END = 0x8bffffff,
	PLAT_BB_MOD_DPU_START = 0x8c000000,
	PLAT_BB_MOD_DPU_END = 0x8cffffff,
	PLAT_BB_MOD_NI700_START = 0x8d000000,
	PLAT_BB_MOD_NI700_END = 0x8dffffff,
	PLAT_BB_MOD_GPU_START = 0x8e000000,
	PLAT_BB_MOD_GPU_END = 0x8effffff,
	PLAT_BB_MOD_CSI_START = 0x8f000000,
	PLAT_BB_MOD_CSI_END = 0x8fffffff,
	PLAT_BB_MOD_CSIDMA_START = 0x90000000,
	PLAT_BB_MOD_CSIDMA_END = 0x90ffffff,
	PLAT_BB_MOD_RANDOM_ALLOCATED_START = 0xd0000000,
	PLAT_BB_MOD_RANDOM_ALLOCATED_END = 0xf0ffffff
};

enum CORE_LIST {
	RDR_AP = 0x1,
	RDR_CSUSE = 0x2,
	RDR_CSUPM = 0x4,
	RDR_SF = 0x8,
	RDR_HIFI = 0x10,
	RDR_ISP = 0x20,
	RDR_VPU = 0x40,
	RDR_NPU = 0x80,
	RDR_DPU = 0x100,
	RDR_TEEOS = 0x200,
	RDR_RCSU = 0x400,
	RDR_CLK = 0x800,
	RDR_EXCEPTION_TRACE = 0x1000,
	RDR_CSI = 0x2000,
	RDR_CSIDMA = 0x4000,
	RDR_CORE_MAX = 15,
};

enum {
	BL31_TRACE_EXCEPTION,
	BL31_TRACE_IRQ_SMC,
	BL31_TRACE_DMSS,
	BL31_TRACE_ENUM,
};

enum {
	BL31_TRACE_EXCEPTION_SIZE = 0x100,
	BL31_TRACE_IRQ_SMC_SIZE = 0x3F000,
	BL31_TRACE_DMSS_SIZE = 0x10000,
};

typedef struct bl31_trace_irq_smc_head_s {
	unsigned long long cpu_num;
	unsigned long long offset[0];
} bl31_trace_irq_smc_head_t;

enum {
	EXCEPTION_TRACE_AP,
	EXCEPTION_TRACE_ENUM,
};

typedef struct rdr_exception_trace_s {
	unsigned long long e_32k_time;
	unsigned long long e_reset_core_mask;
	unsigned long long e_from_core;
	unsigned int e_exce_type;
	unsigned int e_exce_subtype;
} rdr_exception_trace_t;

enum {
	BL31_MNTN_TST_PANIC,
	BL31_MNTN_TST_ASSERT,
};

enum {
	BL31_TRACE_TYPE_SMC,
	BL31_TRACE_TYPE_INTERRUPT,
	BL31_TRACE_TYPE_ENUM,
};

enum {
	BL31_TRACE_IN,
	BL31_TRACE_OUT
};

enum SECMEM_MODULE {
	M3_DDR_MEM,
	BL31_LOG_MEM,
	MAX_MEM,
};

typedef struct bl31_trace_s {
	unsigned long long bl31_32k_time;
	unsigned char type;
	unsigned char dir;
	unsigned char ns;
	union {
		struct {
			unsigned long long func_id;
		} smc;
		struct {
			unsigned int id;
		} interrupt;
	};
} bl31_trace_t;

#define HISIAP_KEYS_MAX 71
typedef struct hisiap_ringbuffer_s {
	unsigned int max_num;
	unsigned int field_count;
	unsigned int rear;
	unsigned int r_idx;
	unsigned int count;
	unsigned int is_full;
	char keys[HISIAP_KEYS_MAX + 1];
	unsigned char data[1];
} hisiap_ringbuffer_t;

struct mntn_reg_val {
	unsigned int init_flag;
	unsigned int scsysstat;
	unsigned int bootpoint;
};

void mntn_reg_save(void *mntn_reg);
void mntn_reg_restore(void *mntn_reg);
#if defined(CONFIG_GCOV_KERNEL) || defined(CONFIG_HISI_GCOV_FASTBOOT)
struct mdump_gcov {
	unsigned long gcda_addr;
	unsigned int gcda_size;
};
#endif
#endif
